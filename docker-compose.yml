# Docker Compose configuration for AI Medical Disease Detection System
version: '3.8'

services:
  # Main application service
  medical-ai-app:
    build: .
    container_name: medical-ai-app
    ports:
      - "8000:8000"  # FastAPI
      - "8501:8501"  # Streamlit
    environment:
      - ENVIRONMENT=production
      - MODEL_CACHE=true
      - SECURITY_LEVEL=high
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./reports:/app/reports
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - medical-ai-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: medical-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - medical-ai-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: medical-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - medical-ai-app
    restart: unless-stopped
    networks:
      - medical-ai-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: medical-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - medical-ai-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: medical-ai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - medical-ai-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  medical-ai-network:
    driver: bridge
